#Remediate CVE-2013-3900 - Certificate Padding Check
#MS13-098: Vulnerability in Windows Could Allow Remote Code Execution (2893294)

$messageString =  '[' + (Get-Date) +'] :: Starting Container and Key Creation Process'
Write-Information $messageString

#Enable certificate padding check

#Attempt the 32bit container
Try
    {
    $messageString =  '[' + (Get-Date) +'] :: Attempt to create the 32bit Container'
    Write-Information $messageString
    New-Item -Path HKLM:\Software\Microsoft\Cryptography\Wintrust\Config -ItemType Container -Force
    $messageString =  '[' + (Get-Date) +'] :: SUCCESS :: 32bit Container created'
    Write-Information $messageString
    }
Catch
    {
    $messageString =  '[' + (Get-Date) +'] :: ERROR:: Failed to create the 32bit container'
    Write-Information $messageString
    $messageString = $($_.Exception.Message)
    Write-Information $messageString
    }

#Attempt the 32bit key
Try
    {
    $messageString =  '[' + (Get-Date) +'] :: Attempt to create the 32bit Key'
    Write-Information $messageString
    New-ItemProperty -Path HKLM:\Software\Microsoft\Cryptography\Wintrust\Config -Name EnableCertPaddingCheck -Value 1 -PropertyType String
    $messageString =  '[' + (Get-Date) +'] :: SUCCESS :: 32bit Container created'
    Write-Information $messageString
    }
Catch
    {
    $messageString =  '[' + (Get-Date) +'] :: ERROR :: Failed to create the 32bit key'
    Write-Information $messageString
    $messageString = $($_.Exception.Message)
    Write-Information $messageString
    }

#Attempt the 64bit container
Try
    {
    $messageString =  '[' + (Get-Date) +'] :: Attempt to create the 64bit Container'
    Write-Information $messageString
    New-Item -Path HKLM:\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config -ItemType Container -Force
    $messageString =  '[' + (Get-Date) +'] :: SUCCESS :: 32bit Container created'
    Write-Information $messageString
    }
Catch
    {
    $messageString =  '[' + (Get-Date) +'] :: ERROR:: Failed to create the 64bit container'
    Write-Information $messageString
    $messageString = $($_.Exception.Message)
    Write-Information $messageString
    }

#Attempt the 64bit key
Try
    {
    $messageString =  '[' + (Get-Date) +'] :: Attempt to create the 64bit Key'
    Write-Information $messageString
    New-ItemProperty -Path HKLM:\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config -Name EnableCertPaddingCheck -Value 1 -PropertyType String
    $messageString =  '[' + (Get-Date) +'] :: SUCCESS :: 64bit Container created'
    Write-Information $messageString
    }
Catch
    {
    $messageString =  '[' + (Get-Date) +'] :: ERROR :: Failed to create the 64bit key'
    Write-Information $messageString
    $messageString = $($_.Exception.Message)
    Write-Information $messageString
    }

Get-Service -Name CryptSvc -Verbose | Stop-Service -Verbose -Force -PassThru | Start-Service -PassThru -Verbose


# Enable additional verbose logging in the CAPI2 event log
  
# Add a DWORD (32-bit) value DiagLevel with value of 0x00000005
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Crypt32' -Name "DiagLevel" -Type DWORD -Value 5
  
# Add a QWORD (64-bit) value DiagMatchAnyMask with value of 0x00ffffff
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\Crypt32' -Name "DiagMatchAnyMask" -Type QWORD -Value 0x00ffffff
  
# Enable CAPI2 operational logging
  
$log = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogConfiguration -ArgumentList "Microsoft-Windows-CAPI2/Operational"
$log.isEnabled = $true
try {
     $log.SaveChanges()
} catch {
    Exit 1
    Write-Warning -Message "Failed to save changes because $($_.Exception.Message)"
} 
 
Get-Service -Name CryptSvc -Verbose | Stop-Service -Verbose -Force -PassThru | Start-Service -PassThru -Verbose

#Report
$HT = @{ ErrorAction = "SilentlyContinue" }
$AMHT = @{ Type = "NoteProperty" ; PassThru = $true ; Force = $true }
$FilterHT = @{ FilterHashTable = @{ LogName = "Microsoft-Windows-CAPI2/Operational" ; Id = 81 }}
Get-WinEvent @FilterHT @HT | ForEach-Object -Process {
    $xml = ([xml]($_.toXML()))
    $_ | Add-Member -Name ProcessName   -Value ($xml.Event.UserData.WinVerifyTrust.EventAuxInfo.ProcessName) @AMHT |
         Add-Member -Name Result        -Value ($xml.Event.UserData.WinVerifyTrust.Result.value) @AMHT |
         Add-Member -Name FilePath      -Value ($xml.Event.UserData.WinVerifyTrust.FileInfo.FilePath) -Force -MemberType NoteProperty
         $msg = 'The WinVerifyTrust check performed by process {0} on file {1} ended with result {2}' -f $_.ProcessName,$_.FilePath,$_.Result
         $_ | Add-Member -Name Message -Value $msg @AMHT
}